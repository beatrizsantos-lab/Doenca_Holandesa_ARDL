fim = as.Date(c("2011-12-31", "2025-07-01"))
)
dados_para_plot_series <- base_modelos %>%
select(Data, lnPIM, lnICBR, lnCAMBIO_REAL, SELIC) %>%
pivot_longer(cols = -Data, names_to = "variavel", values_to = "valor") %>%
mutate(
variavel_bonita = case_when(
variavel == "lnCAMBIO_REAL" ~ "Câmbio Real (Log)",
variavel == "lnICBR"        ~ "Índice de Commodities (Log)",
variavel == "lnPIM"         ~ "Produção da Ind. de Transformação (Log)",
variavel == "SELIC"         ~ "Taxa de Juros (Selic)"
)
)
grafico_series <- ggplot(dados_para_plot_series, aes(x = Data, y = valor)) +
geom_rect(data = booms, aes(xmin = inicio, xmax = fim, ymin = -Inf, ymax = Inf), inherit.aes = FALSE, fill = "grey90", alpha = 0.5) +
geom_line(color = "navy") +
facet_wrap(~ variavel_bonita, scales = "free_y", ncol = 1) +
labs(title = "Evolução das Variáveis de Análise (2002-2025)", x = "Ano", y = "Valor") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5), strip.text = element_text(face = "bold"))
print(grafico_series)
# --- GRÁFICO 1: Série Temporal das Variáveis ---
booms <- tibble(
inicio = as.Date(c("2003-01-01", "2021-01-01")),
fim = as.Date(c("2011-12-31", "2025-07-01"))
)
dados_para_plot_series <- base_modelos %>%
select(Data, lnPIM, lnICBR, lnCAMBIO_REAL, SELIC) %>%
pivot_longer(cols = -Data, names_to = "variavel", values_to = "valor") %>%
mutate(
variavel_bonita = case_when(
variavel == "lnCAMBIO_REAL" ~ "Câmbio Real (Log)",
variavel == "lnICBR"        ~ "Índice de Commodities (Log)",
variavel == "lnPIM"         ~ "Produção da Ind. de Transformação (Log)",
variavel == "SELIC"         ~ "Taxa de Juros (Selic)"
)
)
grafico_series <- ggplot(dados_para_plot_series, aes(x = Data, y = valor)) +
geom_rect(data = booms, aes(xmin = inicio, xmax = fim, ymin = -Inf, ymax = Inf), inherit.aes = FALSE, fill = "grey90", alpha = 0.5) +
geom_line(color = "navy") +
facet_wrap(~ variavel_bonita, scales = "free_y", ncol = 1) +
labs(title = "Evolução das Variáveis de Análise (2002-2025)", x = "Ano", y = "Valor") +
theme_minimal() +
theme(plot.title = element_text(size = 12, hjust = 0.5))
print(grafico_series)
# --- GRÁFICO 1: Série Temporal das Variáveis ---
booms <- tibble(
inicio = as.Date(c("2003-01-01", "2021-01-01")),
fim = as.Date(c("2011-12-31", "2025-07-01"))
)
dados_para_plot_series <- base_modelos %>%
select(Data, lnPIM, lnICBR, lnCAMBIO_REAL, SELIC) %>%
pivot_longer(cols = -Data, names_to = "variavel", values_to = "valor") %>%
mutate(
variavel_bonita = case_when(
variavel == "lnCAMBIO_REAL" ~ "Câmbio Real (Log)",
variavel == "lnICBR"        ~ "Índice de Commodities (Log)",
variavel == "lnPIM"         ~ "Produção da Ind. de Transformação (Log)",
variavel == "SELIC"         ~ "Taxa de Juros (Selic)"
)
)
grafico_series <- ggplot(dados_para_plot_series, aes(x = Data, y = valor)) +
geom_rect(data = booms, aes(xmin = inicio, xmax = fim, ymin = -Inf, ymax = Inf), inherit.aes = FALSE, fill = "grey90", alpha = 0.5) +
geom_line(color = "navy") +
facet_wrap(~ variavel_bonita, scales = "free_y", ncol = 1) +
labs(title = "Evolução das Variáveis de Análise (2002-2025)", x = "Ano", y = "Valor") +
theme_minimal() +
theme(plot.title = element_text(size = 11, hjust = 0.5))
print(grafico_series)
# --- GRÁFICO 2: Coeficientes de Longo Prazo (Modelo 2) ---
grafico_coeficientes <- multipliers(modelo_final_pim) %>%
as.data.frame() %>%
rownames_to_column(var = "termo") %>%
filter(termo != "(Intercept)") %>%
mutate(
ci_inferior = Estimate - 1.96 * `Std. Error`,
ci_superior = Estimate + 1.96 * `Std. Error`,
termo_bonito = case_when(
termo == "lnCAMBIO_REAL"            ~ "Câmbio Real (Log)",
termo == "SELIC"                    ~ "Taxa de Juros (Selic)",
termo == "D_Boom_2000s"             ~ "Dummy: Boom Anos 2000",
termo == "D_Boom_Pandemia"          ~ "Dummy: Boom Pós-Pandemia",
termo == "Interacao_CAMBIO_2000s"   ~ "Interação: Câmbio x Boom 2000s",
termo == "Interacao_CAMBIO_Pandemia"~ "Interação: Câmbio x Boom Pandemia",
TRUE                               ~ as.character(termo)
)
) %>%
ggplot(aes(x = Estimate, y = fct_reorder(termo_bonito, Estimate))) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
geom_point(color = "darkred", size = 3) +
geom_errorbarh(aes(xmin = ci_inferior, xmax = ci_superior), height = 0.2, color = "darkred") +
labs(title = "Resultados de Longo Prazo do Modelo 2", subtitle = "Coeficientes e Intervalos de Confiança de 95%", x = "Estimativa do Coeficiente (Elasticidade)", y = "Variável") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
print(grafico_coeficientes)
# --- GRÁFICO 3: Teste de Estabilidade CUSUM (Modelo 2) ---
modelo_uecm_pim <- uecm(modelo_final_pim)
cusum_teste <- efp(formula(modelo_uecm_pim), data = dados_ts, type = "Rec-CUSUM")
plot(cusum_teste, main = "Teste CUSUM de Estabilidade (Modelo 2)")
install.packages("car")
# (Execute apenas uma vez) Instalação dos pacotes necessários
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("lubridate")
install.packages("urca")
install.packages("ARDL")
install.packages("lmtest")
install.packages("lmtest")
install.packages("sandwich")
install.packages("tseries")
install.packages("strucchange")
install.packages("car")
# Carregue todos os pacotes necessários para a sessão
library(tidyverse)
library(lubridate)
library(urca)
library(ARDL)
library(lmtest)
library(sandwich)
library(tseries)
library(strucchange)
library(car)
# Carregar os arquivos CSV.
# ATENÇÃO: Usando o arquivo da Indústria de Transformação para a PIM.
dados_pim <- read_csv2("PIM.csv") # <-- AJUSTE O NOME DO ARQUIVO SE NECESSÁRIO
dados_icbr <- read_csv2("ICBR.csv")
dados_cambio <- read_csv2("INPC(Câmbio).csv")
dados_selic <- read_csv2("TxJuros.csv")
# Renomear colunas e garantir que 'Data' seja do tipo Data
dados_pim <- dados_pim %>% mutate(Data = dmy(Data))
dados_icbr <- dados_icbr %>% rename(ICBR = IC_Br) %>% mutate(Data = dmy(Data))
dados_cambio <- dados_cambio %>% rename(CAMBIO_REAL = INPC_TxCambioEfetivaReal) %>% mutate(Data = dmy(Data))
dados_selic <- dados_selic %>% rename(SELIC = Selic_Acum) %>% mutate(Data = dmy(Data))
# Juntar todas as tabelas em uma única base de dados
base_final <- dados_pim %>%
full_join(dados_icbr, by = "Data") %>%
full_join(dados_cambio, by = "Data") %>%
full_join(dados_selic, by = "Data") %>%
arrange(Data) %>%
drop_na()
# Criar as variáveis transformadas (logaritmos, dummies e interações)
base_modelos <- base_final %>%
mutate(
lnPIM = log(PIM),
lnICBR = log(ICBR),
lnCAMBIO_REAL = log(CAMBIO_REAL),
D_Boom_2000s = ifelse(Data >= ymd("2003-01-01") & Data <= ymd("2011-12-01"), 1, 0),
D_Boom_Pandemia = ifelse(Data >= ymd("2021-01-01"), 1, 0),
Interacao_ICBR_2000s = lnICBR * D_Boom_2000s,
Interacao_ICBR_Pandemia = lnICBR * D_Boom_Pandemia,
Interacao_CAMBIO_2000s = lnCAMBIO_REAL * D_Boom_2000s,
Interacao_CAMBIO_Pandemia = lnCAMBIO_REAL * D_Boom_Pandemia
)
# (Opcional) Verificação rápida da base final
summary(base_modelos)
start_year <- year(first(base_modelos$Data))
start_month <- month(first(base_modelos$Data))
# Criar o objeto 'ts' removendo a coluna 'Data'
dados_ts <- ts(select(base_modelos, -Data),
start = c(start_year, start_month),
frequency = 12)
# Testes em Primeira Diferença (espera-se serem estacionárias)
summary(ur.df(diff(dados_ts[, "lnPIM"]), type = "drift", selectlags = "AIC"))
summary(ur.df(diff(dados_ts[, "lnICBR"]), type = "drift", selectlags = "AIC"))
summary(ur.df(diff(dados_ts[, "lnCAMBIO_REAL"]), type = "drift", selectlags = "AIC"))
summary(ur.df(diff(dados_ts[, "SELIC"]), type = "drift", selectlags = "AIC"))
# Definir a fórmula completa do Modelo 1
formula_cambio <- lnCAMBIO_REAL ~ lnICBR + SELIC + D_Boom_2000s + D_Boom_Pandemia + Interacao_ICBR_2000s + Interacao_ICBR_Pandemia
# Encontrar a ordem ótima de defasagens
auto_cambio <- auto_ardl(formula_cambio, data = dados_ts, max_order = 5)
ordem_cambio <- auto_cambio$best_order
# Estimar o modelo ARDL final
modelo_final_cambio <- ardl(formula_cambio, data = dados_ts, order = ordem_cambio)
# Análise dos resultados do Modelo 1
print("--- RESULTADOS MODELO 1: CANAL DO CÂMBIO ---")
print("Coeficientes de Longo Prazo:")
print(multipliers(modelo_final_cambio))
print("Teste de Limites para Cointegração:")
print(bounds_f_test(modelo_final_cambio, case = 3))
# Definir a fórmula completa do Modelo 2
formula_pim <- lnPIM ~ lnCAMBIO_REAL + SELIC + D_Boom_2000s + D_Boom_Pandemia + Interacao_CAMBIO_2000s + Interacao_CAMBIO_Pandemia
# Encontrar a ordem ótima de defasagens
auto_pim <- auto_ardl(formula_pim, data = dados_ts, max_order = 5)
ordem_pim <- auto_pim$best_order
# Estimar o modelo ARDL final
modelo_final_pim <- ardl(formula_pim, data = dados_ts, order = ordem_pim)
# Análise dos resultados do Modelo 2
print("--- RESULTADOS MODELO 2: CANAL DA DESINDUSTRIALIZAÇÃO ---")
print("Coeficientes de Longo Prazo:")
print(multipliers(modelo_final_pim))
print("Teste de Limites para Cointegração:")
print(bounds_f_test(modelo_final_pim, case = 3))
print("--- DIAGNÓSTICOS DO MODELO 2 ---")
# Teste de Autocorrelação Serial (Breusch-Godfrey) - H0: Não há autocorrelação
print(bgtest(modelo_final_pim))
# Teste de Heterocedasticidade (Breusch-Pagan) - H0: Não há heterocedasticidade
print(bptest(modelo_final_pim))
# Análise de Robustez para a Heterocedasticidade
print("--- ANÁLISE DE ROBUSTEZ (ERROS-PADRÃO ROBUSTOS) ---")
# Recalcula os p-valores dos coeficientes de curto prazo
print(coeftest(modelo_final_pim, vcov = vcovHC(modelo_final_pim, type = "HC3")))
# --- ECM (termo de correção de erro) do Modelo 2 ---
cat("\n--- ECM do MODELO 2 ---\n")
ecm_pim <- ecm(modelo_final_pim)
# --- ECM (termo de correção de erro) do Modelo 2 ---
cat("\n--- ECM do MODELO 2 ---\n")
ARDL::ecm_pim <- ecm(modelo_final_pim)
# --- ECM (termo de correção de erro) do Modelo 2 ---
cat("\n--- ECM do MODELO 2 ---\n")
# Função compatível com diferentes versões do pacote ARDL
get_ecm <- function(m){
if ("ARDL" %in% .packages(all.available = TRUE)) {
exps <- getNamespaceExports("ARDL")
if ("ecm"  %in% exps) return(ARDL::ecm(m))    # versões mais novas
if ("uecm" %in% exps) return(ARDL::uecm(m))   # versões antigas
}
stop("Sua versão do pacote ARDL não possui 'ecm' nem 'uecm'. Atualize o pacote ARDL.")
}
ecm_obj <- get_ecm(modelo_final_pim)
# Algumas versões retornam um objeto 'lm' diretamente; outras, um wrapper com $lm
ecm_fit <- if (inherits(ecm_obj, "lm")) ecm_obj else if (!is.null(ecm_obj$lm)) ecm_obj$lm else ecm_obj
print(summary(ecm_fit))  # coeficiente do ECT (speed of adjustment) deve ser < 0 e significativo
# Erros-padrão robustos no ECM (HC3)
library(sandwich); library(lmtest)
cat("\n--- ECM com erros robustos (HC3) ---\n")
print(coeftest(ecm_fit, vcov = vcovHC(ecm_fit, type = "HC3")))
# --- Autocorrelação sazonal até 12 defasagens (mensal) ---
cat("\n--- Breusch-Godfrey (ordem 12) ---\n")
print(bgtest(modelo_final_pim, order = 12))
# --- Wald: quebras paramétricas entre regimes (long-run via interações) ---
cat("\n--- TESTES WALD DE QUEBRA ENTRE REGIMES ---\n")
# H0: Interacao_CAMBIO_2000s = 0  (efeito não difere do período base)
print(linearHypothesis(modelo_final_pim, "Interacao_CAMBIO_2000s = 0"))
# H0: Interacao_CAMBIO_Pandemia = 0  (efeito não difere do período base)
print(linearHypothesis(modelo_final_pim, "Interacao_CAMBIO_Pandemia = 0"))
# H0: efeitos iguais entre 2000s e pós-pandemia
print(linearHypothesis(modelo_final_pim,
"Interacao_CAMBIO_2000s = Interacao_CAMBIO_Pandemia"))
# --- Efeitos de longo prazo por regime (para reportar no texto) ---
lr_tab <- multipliers(modelo_final_pim) %>% as.data.frame() %>% tibble::rownames_to_column("term")
beta_base <- lr_tab %>% dplyr::filter(term == "lnCAMBIO_REAL") %>% dplyr::pull(Estimate)
beta_2000 <- beta_base + (lr_tab %>% dplyr::filter(term == "Interacao_CAMBIO_2000s") %>% dplyr::pull(Estimate))
beta_pand <- beta_base + (lr_tab %>% dplyr::filter(term == "Interacao_CAMBIO_Pandemia") %>% dplyr::pull(Estimate))
cat("\nLong run do câmbio por regime:\n")
cat(sprintf("• Base (sem dummy): %.4f\n", beta_base))
cat(sprintf("• Boom 2000s      : %.4f\n", beta_2000))
cat(sprintf("• Pós-pandemia    : %.4f\n", beta_pand))
car::linearHypothesis(modelo_final_pim,
c("Interacao_CAMBIO_2000s = 0", "Interacao_CAMBIO_Pandemia = 0"))
car::linearHypothesis(modelo_final_pim,
c("D_Boom_2000s = 0", "D_Boom_Pandemia = 0"))
cat("\nLong run do câmbio por regime:\n")
cat(
sprintf("• %-18s: % .4f",
c("Base (sem dummy)", "Boom 2000s", "Pós-pandemia"),
c(beta_base, beta_2000, beta_pand)),
sep = "\n"
)
lr_regimes <- tibble::tibble(
Regime = c("Base (sem dummy)","Boom 2000s","Pós-pandemia"),
Beta_Longo_Prazo = c(beta_base, beta_2000, beta_pand)
)
# --- GRÁFICO 1: Série Temporal das Variáveis ---
booms <- tibble(
inicio = as.Date(c("2003-01-01", "2021-01-01")),
fim = as.Date(c("2011-12-31", "2025-07-01"))
)
dados_para_plot_series <- base_modelos %>%
select(Data, lnPIM, lnICBR, lnCAMBIO_REAL, SELIC) %>%
pivot_longer(cols = -Data, names_to = "variavel", values_to = "valor") %>%
mutate(
variavel_bonita = case_when(
variavel == "lnCAMBIO_REAL" ~ "Câmbio Real (Log)",
variavel == "lnICBR"        ~ "Índice de Commodities (Log)",
variavel == "lnPIM"         ~ "Produção da Ind. de Transformação (Log)",
variavel == "SELIC"         ~ "Taxa de Juros (Selic)"
)
)
grafico_series <- ggplot(dados_para_plot_series, aes(x = Data, y = valor)) +
geom_rect(data = booms, aes(xmin = inicio, xmax = fim, ymin = -Inf, ymax = Inf), inherit.aes = FALSE, fill = "grey90", alpha = 0.5) +
geom_line(color = "navy") +
facet_wrap(~ variavel_bonita, scales = "free_y", ncol = 1) +
labs(title = "Evolução das Variáveis de Análise (2002-2025)", x = "Ano", y = "Valor") +
theme_minimal() +
theme(plot.title = element_text(size = 11, hjust = 0.5))
print(grafico_series)
# --- GRÁFICO 2: Long run multipliers (Modelo 2) com IC 95% ---
lr_plot <- multipliers(modelo_final_pim) %>% as.data.frame() %>%
tibble::rownames_to_column("termo") %>%
dplyr::filter(termo != "(Intercept)") %>%
dplyr::mutate(
ci_low  = Estimate - 1.96 * `Std. Error`,
ci_high = Estimate + 1.96 * `Std. Error`,
termo_bonito = dplyr::case_when(
termo == "lnCAMBIO_REAL"             ~ "Câmbio Real (log)",
termo == "SELIC"                     ~ "Taxa Selic",
termo == "D_Boom_2000s"              ~ "Dummy: Boom 2000s",
termo == "D_Boom_Pandemia"           ~ "Dummy: Pós-pandemia",
termo == "Interacao_CAMBIO_2000s"    ~ "Câmbio × Boom 2000s",
termo == "Interacao_CAMBIO_Pandemia" ~ "Câmbio × Pós-pandemia",
TRUE ~ termo
),
termo_bonito = forcats::fct_reorder(termo_bonito, Estimate)
)
grafico_lr <- ggplot(lr_plot, aes(x = Estimate, y = termo_bonito)) +
geom_vline(xintercept = 0, linetype = 2) +
geom_point(size = 2) +
geom_errorbarh(aes(xmin = ci_low, xmax = ci_high), height = 0.15) +
labs(title = "Efeitos de Longo Prazo – Modelo 2 (ARDL)",
x = "Coeficiente (IC 95%)", y = NULL) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
print(grafico_lr)
# --- GRÁFICO 2: Long run multipliers (Modelo 2) com IC 95% ---
lr_plot <- multipliers(modelo_final_pim) %>% as.data.frame() %>%
tibble::rownames_to_column("termo") %>%
dplyr::filter(termo != "(Intercept)") %>%
dplyr::mutate(
ci_low  = Estimate - 1.96 * `Std. Error`,
ci_high = Estimate + 1.96 * `Std. Error`,
termo_bonito = dplyr::case_when(
termo == "lnCAMBIO_REAL"             ~ "Câmbio Real (log)",
termo == "SELIC"                     ~ "Taxa Selic",
termo == "D_Boom_2000s"              ~ "Dummy: Boom 2000s",
termo == "D_Boom_Pandemia"           ~ "Dummy: Pós-pandemia",
termo == "Interacao_CAMBIO_2000s"    ~ "Câmbio × Boom 2000s",
termo == "Interacao_CAMBIO_Pandemia" ~ "Câmbio × Pós-pandemia",
TRUE ~ termo
),
# 🔧 GARANTIR FATOR E ORDEM (topo = maior efeito)
termo_bonito = forcats::fct_rev(forcats::fct_reorder(termo_bonito, Estimate))
)
grafico_lr <- ggplot(lr_plot, aes(x = Estimate, y = termo_bonito)) +
geom_vline(xintercept = 0, linetype = 2) +
geom_point(size = 2) +
geom_errorbarh(aes(xmin = ci_low, xmax = ci_high), height = 0.15) +
labs(title = "Efeitos de Longo Prazo – Modelo 2 (ARDL)",
x = "Coeficiente (IC 95%)", y = NULL) +
scale_y_discrete(drop = FALSE) +   # força eixo discreto
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
print(grafico_lr)
# --- GRÁFICO 2: Long run multipliers (Modelo 2) com IC 95% ---
lr_plot <- multipliers(modelo_final_pim) %>% as.data.frame() %>%
tibble::rownames_to_column("termo") %>%
dplyr::filter(termo != "(Intercept)") %>%
dplyr::mutate(
ci_low  = Estimate - 1.96 * `Std. Error`,
ci_high = Estimate + 1.96 * `Std. Error`,
termo_bonito = dplyr::case_when(
termo == "lnCAMBIO_REAL"             ~ "Câmbio Real (log)",
termo == "SELIC"                     ~ "Taxa Selic",
termo == "D_Boom_2000s"              ~ "Dummy: Boom 2000s",
termo == "D_Boom_Pandemia"           ~ "Dummy: Pós-pandemia",
termo == "Interacao_CAMBIO_2000s"    ~ "Câmbio × Boom 2000s",
termo == "Interacao_CAMBIO_Pandemia" ~ "Câmbio × Pós-pandemia",
TRUE ~ termo
),
termo_bonito = forcats::fct_reorder(termo_bonito, Estimate)
)
ggplot(lr_plot, aes(x = Estimate, y = factor(termo_bonito))) +  # 👈 vira fator aqui
geom_vline(xintercept = 0, linetype = 2) +
geom_point(size = 2) +
geom_errorbarh(aes(xmin = ci_low, xmax = ci_high), height = 0.15) +
labs(title = "Efeitos de Longo Prazo – Modelo 2 (ARDL)",
x = "Coeficiente (IC 95%)", y = NULL) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
print(grafico_lr)
# --- GRÁFICO 2: Long run multipliers (fixando rótulos do eixo Y) ---
lr_plot <- multipliers(modelo_final_pim) %>% as.data.frame() %>%
tibble::rownames_to_column("termo") %>%
dplyr::filter(termo != "(Intercept)") %>%
dplyr::mutate(
ci_low  = Estimate - 1.96 * `Std. Error`,
ci_high = Estimate + 1.96 * `Std. Error`,
termo_bonito = dplyr::case_when(
termo == "lnCAMBIO_REAL"             ~ "Câmbio Real (log)",
termo == "SELIC"                     ~ "Taxa Selic",
termo == "D_Boom_2000s"              ~ "Dummy: Boom 2000s",
termo == "D_Boom_Pandemia"           ~ "Dummy: Pós-pandemia",
termo == "Interacao_CAMBIO_2000s"    ~ "Câmbio × Boom 2000s",
termo == "Interacao_CAMBIO_Pandemia" ~ "Câmbio × Pós-pandemia",
TRUE ~ termo
)
)
# níveis (ordem que você quer ver no Y). Pode reordenar essa lista se preferir.
levels_y <- c(
"Câmbio Real (log)",
"Taxa Selic",
"Dummy: Boom 2000s",
"Dummy: Pós-pandemia",
"Câmbio × Boom 2000s",
"Câmbio × Pós-pandemia"
)
# força fator COM níveis explícitos (e invertidos para o primeiro ficar no topo)
lr_plot$termo_bonito <- factor(lr_plot$termo_bonito, levels = rev(levels_y))
grafico_lr <- ggplot(lr_plot, aes(x = Estimate, y = termo_bonito)) +
geom_vline(xintercept = 0, linetype = 2) +
geom_point(size = 2) +
geom_errorbarh(aes(xmin = ci_low, xmax = ci_high), height = 0.15) +
labs(title = "Efeitos de Longo Prazo – Modelo 2 (ARDL)",
x = "Coeficiente (IC 95%)", y = NULL) +
# breaks + labels garantem que NÃO haverão 1,2,3...
scale_y_discrete(breaks = levels(lr_plot$termo_bonito),
labels = levels(lr_plot$termo_bonito)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
print(grafico_lr)
# --- GRÁFICO 2: Long run multipliers (fixando rótulos do eixo Y) ---
# Veja o que chegou
print(unique(lr_plot$termo))
print(unique(lr_plot$termo_bonito))
print(table(lr_plot$termo_bonito, useNA = "ifany"))
# padroniza possiveis diferenças de 'x' vs '×' e espaços
lr_plot$termo_bonito <- gsub("×", "x", lr_plot$termo_bonito, fixed = TRUE)
lr_plot$termo_bonito <- trimws(lr_plot$termo_bonito)
# fator com níveis DERIVADOS dos dados (sem hardcode) e ordenado pelo coeficiente
lr_plot$termo_bonito <- forcats::fct_reorder(lr_plot$termo_bonito, lr_plot$Estimate)
lr_plot$termo_bonito <- forcats::fct_rev(lr_plot$termo_bonito)  # topo = maior
grafico_lr <- ggplot(lr_plot, aes(x = Estimate, y = termo_bonito)) +
geom_vline(xintercept = 0, linetype = 2) +
geom_point(size = 2) +
geom_errorbarh(aes(xmin = ci_low, xmax = ci_high), height = 0.15) +
labs(title = "Efeitos de Longo Prazo – Modelo 2 (ARDL)",
x = "Coeficiente (IC 95%)", y = NULL) +
scale_y_discrete(drop = FALSE) +   # garante eixo discreto
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
print(grafico_lr)
# 1) Captura robusta da tabela de long-run multipliers
lr_raw <- multipliers(modelo_final_pim)
if ("Term" %in% colnames(lr_raw)) {
# Caso como no seu print: já vem com coluna 'Term'
lr_df <- tibble::as_tibble(lr_raw) %>%
dplyr::rename(termo = Term,
Estimate = Estimate,
`Std. Error` = `Std. Error`)
} else {
# Caso clássico: nomes estão nos rownames
lr_df <- as.data.frame(lr_raw) %>%
tibble::rownames_to_column("termo")
}
# 2) Limpeza + nomes bonitos
lr_plot <- lr_df %>%
dplyr::filter(termo != "(Intercept)") %>%
dplyr::mutate(
ci_low  = Estimate - 1.96 * `Std. Error`,
ci_high = Estimate + 1.96 * `Std. Error`,
termo_bonito = dplyr::case_when(
termo == "lnCAMBIO_REAL"             ~ "Câmbio Real (log)",
termo == "SELIC"                     ~ "Taxa Selic",
termo == "D_Boom_2000s"              ~ "Dummy: Boom 2000s",
termo == "D_Boom_Pandemia"           ~ "Dummy: Pós-pandemia",
termo == "Interacao_CAMBIO_2000s"    ~ "Câmbio × Boom 2000s",
termo == "Interacao_CAMBIO_Pandemia" ~ "Câmbio × Pós-pandemia",
TRUE ~ termo
)
)
# 3) Garantir fator (ordem do maior pro menor) e plotar
lr_plot$termo_bonito <- forcats::fct_rev(forcats::fct_reorder(lr_plot$termo_bonito, lr_plot$Estimate))
grafico_lr <- ggplot(lr_plot, aes(x = Estimate, y = termo_bonito)) +
geom_vline(xintercept = 0, linetype = 2) +
geom_point(size = 2) +
geom_errorbarh(aes(xmin = ci_low, xmax = ci_high), height = 0.15) +
labs(title = "Efeitos de Longo Prazo – Modelo 2 (ARDL)",
x = "Coeficiente (IC 95%)", y = NULL) +
scale_y_discrete(drop = FALSE) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
print(grafico_lr)
# 1) Captura robusta da tabela de long-run multipliers
lr_raw <- multipliers(modelo_final_pim)
if ("Term" %in% colnames(lr_raw)) {
# Caso como no seu print: já vem com coluna 'Term'
lr_df <- tibble::as_tibble(lr_raw) %>%
dplyr::rename(termo = Term,
Estimate = Estimate,
`Std. Error` = `Std. Error`)
} else {
# Caso clássico: nomes estão nos rownames
lr_df <- as.data.frame(lr_raw) %>%
tibble::rownames_to_column("termo")
}
# 2) Limpeza + nomes bonitos
lr_plot <- lr_df %>%
dplyr::filter(termo != "(Intercept)") %>%
dplyr::mutate(
ci_low  = Estimate - 1.96 * `Std. Error`,
ci_high = Estimate + 1.96 * `Std. Error`,
termo_bonito = dplyr::case_when(
termo == "lnCAMBIO_REAL"             ~ "Câmbio Real (log)",
termo == "SELIC"                     ~ "Taxa Selic",
termo == "D_Boom_2000s"              ~ "Dummy: Boom 2000s",
termo == "D_Boom_Pandemia"           ~ "Dummy: Pós-pandemia",
termo == "Interacao_CAMBIO_2000s"    ~ "Câmbio × Boom 2000s",
termo == "Interacao_CAMBIO_Pandemia" ~ "Câmbio × Pós-pandemia",
TRUE ~ termo
)
)
# 3) Garantir fator (ordem do maior pro menor) e plotar
lr_plot$termo_bonito <- forcats::fct_rev(forcats::fct_reorder(lr_plot$termo_bonito, lr_plot$Estimate))
grafico_lr <- ggplot(lr_plot, aes(x = Estimate, y = termo_bonito)) +
geom_vline(xintercept = 0, linetype = 2) +
geom_point(size = 2) +
geom_errorbarh(aes(xmin = ci_low, xmax = ci_high), height = 0.15) +
labs(title = "Efeitos de Longo Prazo – Modelo 2",
x = "Coeficiente (IC 95%)", y = NULL) +
scale_y_discrete(drop = FALSE) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
print(grafico_lr)
